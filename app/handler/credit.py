from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from app.database import get_user_by_telegram_id
from app.messages import langs
from app.keyboards import get_credit_history_agree_keyboard

router = Router()
STAFF_GROUP_ID = -4813065675

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
requests_cache = {}

def get_credit_request_buttons(user_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_client:{user_id}"),
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_request:{user_id}")
            ]
        ]
    )

# üìä –£–∑–Ω–∞—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
@router.message(F.text == "üìä –£–∑–Ω–∞—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é")
async def request_credit_history(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")

    await message.answer(
        (
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à—É –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, –º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?"
            if lang == "ru"
            else "Kredit tarixingizni bilish uchun biz ma‚Äòlumotlaringizni menejerga yuborishimiz kerak. Rozimisiz?"
        ),
        reply_markup=get_credit_history_agree_keyboard(lang)
    )

# üì§ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "agree_send_data")
async def send_credit_request(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = get_user_by_telegram_id(user_id)

    if not user_data:
        return await callback.message.answer("‚õîÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    full_name, phone, birthday, pinfl = user_data
    text = (
        f"‚úâÔ∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é</b>\n\n"
        f"<b>–§–ò–û:</b> {full_name}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthday}\n"
        f"<b>–ü–ò–ù–§–õ:</b> {pinfl}"
    )

    await callback.answer("‚úâÔ∏è –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    await callback.message.answer("‚úâÔ∏è –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞")

    await callback.bot.send_message(
        STAFF_GROUP_ID,
        text,
        reply_markup=get_credit_request_buttons(user_id),
        parse_mode="HTML"
    )

# üìù –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
@router.callback_query(F.data.startswith("reply_to_client:"))
async def reply_to_client(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.update_data(reply_target=user_id)
    await callback.message.answer("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# üì¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.message(F.text)
async def handle_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    target_id = data.get("reply_target")

    if target_id:
        await message.bot.send_message(target_id, f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.")
        await state.update_data(reply_target=None)

# ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É
@router.callback_query(F.data.startswith("finish_request:"))
async def finish_request(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    await callback.bot.send_message(
        user_id,
        "‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –±—É–¥—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
    )
    await callback.message.edit_reply_markup()
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è.")
