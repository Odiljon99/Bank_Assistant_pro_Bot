# ‚úÖ main.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (aiogram 2.25.2, Render-ready)
# –í–∫–ª—é—á–∞–µ—Ç: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –º–µ–Ω—é, –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –º–æ–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∑–∞–¥, –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã

# üì¶ –ò–º–ø–æ—Ä—Ç—ã
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging, sqlite3, os
from datetime import datetime

# üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)
db = sqlite3.connect("data.db")
c = db.cursor()

# üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
c.execute("""CREATE TABLE IF NOT EXISTS clients (
    telegram_id INTEGER PRIMARY KEY,
    lang TEXT,
    full_name TEXT,
    phone TEXT,
    passport TEXT,
    birth_date TEXT,
    pinfl TEXT
)""")
c.execute("""CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    request_type TEXT,
    full_name TEXT,
    phone TEXT,
    passport TEXT,
    birth_date TEXT,
    pinfl TEXT,
    problem TEXT,
    response TEXT,
    created_at TEXT
)""")
db.commit()

# üö¶ –°–æ—Å—Ç–æ—è–Ω–∏—è
class Reg(StatesGroup):
    lang = State()
    full_name = State()
    phone = State()
    passport = State()
    birth_date = State()
    pinfl = State()

class Problem(StatesGroup):
    entering = State()
    replying = State()

client_last_message = {}
step_stack = {}

# üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LANG_TEXT = {
    'ru': {
        'welcome': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!",
        'enter_name': "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:",
        'enter_phone': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'enter_passport': "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:",
        'enter_birth': "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):",
        'enter_pinfl': "–í–≤–µ–¥–∏—Ç–µ –ü–ò–ù–§–õ (14 —Ü–∏—Ñ—Ä):",
        'reg_done': "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'menu': ["1Ô∏è‚É£ –£–∑–Ω–∞—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é", "2Ô∏è‚É£ –ö—Ä–µ–¥–∏—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "3Ô∏è‚É£ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É", "üìÑ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"],
        'describe_problem': "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        'accepted': "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        'your_data': "üìÑ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:",
    },
    'uz': {
        'welcome': "Botimizga xush kelibsiz!",
        'enter_name': "F.I.Sh.ni kiriting:",
        'enter_phone': "Telefon raqamingizni kiriting:",
        'enter_passport': "Pasport seriyasi va raqamini kiriting:",
        'enter_birth': "Tug'ilgan sanangiz (kk.oo.yyyy):",
        'enter_pinfl': "JShShIR ni kiriting (14 raqam):",
        'reg_done': "‚úÖ Ro'yxatdan o'tish yakunlandi. Xizmatni tanlang:",
        'menu': ["1Ô∏è‚É£ Kredit tarixini bilish", "2Ô∏è‚É£ Kredit kalkulyator", "3Ô∏è‚É£ Menejer bilan bog'lanish", "üìÑ Ma'lumotlarim", "üåê Tilni o‚Äòzgartirish"],
        'describe_problem': "‚úçÔ∏è Muammoni yozing:",
        'accepted': "‚úÖ Qabul qilindi. Javob kuting.",
        'your_data': "üìÑ Sizning ma'lumotlaringiz:",
    }
}

def get_lang(uid):
    c.execute("SELECT lang FROM clients WHERE telegram_id = ?", (uid,))
    row = c.fetchone()
    return row[0] if row else 'ru'

def make_menu(lang):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for item in LANG_TEXT[lang]['menu']:
        kb.add(item)
    kb.add("üîô –ù–∞–∑–∞–¥" if lang == 'ru' else "üîô Ortga", "üìã –ú–µ–Ω—é" if lang == 'ru' else "üìã Asosiy menyu")
    return kb

# üü¢ –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_cmd(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:", reply_markup=kb)
    await Reg.lang.set()
    step_stack[msg.from_user.id] = []

@dp.message_handler(lambda m: m.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha"], state=Reg.lang)
async def choose_lang(msg: types.Message, state: FSMContext):
    lang = 'ru' if '–†—É—Å' in msg.text else 'uz'
    await state.update_data(lang=lang)
    step_stack[msg.from_user.id].append(Reg.lang)
    await msg.answer(LANG_TEXT[lang]['enter_name'])
    await Reg.full_name.set()

@dp.message_handler(lambda m: m.text in ["üîô –ù–∞–∑–∞–¥", "üîô Ortga"], state="*")
async def go_back(msg: types.Message, state: FSMContext):
    stack = step_stack.get(msg.from_user.id, [])
    if len(stack) > 1:
        stack.pop()
        await stack[-1].set()
        await msg.answer("‚Ü©Ô∏è –ù–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:" if get_lang(msg.from_user.id) == 'ru' else "‚Ü©Ô∏è Ortga. Qayta kiriting:")
    else:
        await msg.answer("üö´ –ù–∞–∑–∞–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")

@dp.message_handler(lambda m: m.text in ["üìã –ú–µ–Ω—é", "üìã Asosiy menyu"], state="*")
async def menu_return(msg: types.Message, state: FSMContext):
    lang = get_lang(msg.from_user.id)
    kb = make_menu(lang)
    await msg.answer(LANG_TEXT[lang]['reg_done'], reply_markup=kb)
    await state.finish()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏...