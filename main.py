import logging
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        full_name TEXT,
        phone TEXT,
        birth TEXT,
        pinfl TEXT,
        lang TEXT
    )
""")
conn.commit()

class Register(StatesGroup):
    language = State()
    full_name = State()
    phone = State()
    birth = State()
    pinfl = State()
    problem = State()

user_data = {}

# –Ø–∑—ã–∫–∏
langs = {
    'ru': {
        'welcome': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞.",
        'menu': "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        'reg_done': "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
        'send_full_name': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        'send_phone': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'send_birth': "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):",
        'send_pinfl': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ü–ò–ù–§–õ (14 —Ü–∏—Ñ—Ä):\nüîç –ù–∞–π—Ç–∏ –º–æ–∂–Ω–æ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞.",
        'change_lang': "üá∑üá∫ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'to_menu': "üîô –í –º–µ–Ω—é",
        'send_problem': "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
        'problem_sent': "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.",
        'start_warning': "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —Ä–∞–¥–∏ —à—É—Ç–∫–∏. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è.",
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:"
    },
    'uz': {
        'welcome': "Bank yordamchi botiga xush kelibsiz.",
        'menu': "üìã Asosiy menyu:",
        'reg_done': "‚úÖ Ro ªyxatdan o ªtdingiz.",
        'send_full_name': "FISH ni kiriting:",
        'send_phone': "Telefon raqamingizni kiriting:",
        'send_birth': "Tug'ilgan sanangiz (KK.OY.YYYY):",
        'send_pinfl': "PINFL kiriting (14 raqam):\nüîç Uni pasportda yoki bank ilovasida topishingiz mumkin.",
        'change_lang': "üá∫üáø Tilni o‚Äòzgartirish",
        'to_menu': "üîô Menyuga",
        'send_problem': "Muammoni yozing:",
        'problem_sent': "‚úÖ So‚Äòrovingiz yuborildi. Javobni kuting.",
        'start_warning': "‚ùó Iltimos, botdan hazil uchun foydalanmang. Harakatlaringiz nazorat qilinadi.",
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:"
    }
}

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands="start")
async def start_cmd(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton("üá∫üáø O‚Äòzbek"))
    await message.answer(langs['ru']['choose_lang'], reply_markup=markup)
    await Register.language.set()

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(lambda msg: msg.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O‚Äòzbek"], state=Register.language)
async def set_lang(message: types.Message, state: FSMContext):
    lang = 'ru' if "–†—É—Å" in message.text else 'uz'
    await state.update_data(lang=lang)
    await message.answer(langs[lang]['start_warning'])
    await message.answer(langs[lang]['send_full_name'], reply_markup=types.ReplyKeyboardRemove())
    await Register.full_name.set()

@dp.message_handler(state=Register.full_name)
async def full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer(langs[(await state.get_data())['lang']]['send_phone'])
    await Register.phone.set()

@dp.message_handler(state=Register.phone)
async def phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer(langs[(await state.get_data())['lang']]['send_birth'])
    await Register.birth.set()

@dp.message_handler(state=Register.birth)
async def birth(message: types.Message, state: FSMContext):
    await state.update_data(birth=message.text)
    await message.answer(langs[(await state.get_data())['lang']]['send_pinfl'])
    await Register.pinfl.set()

@dp.message_handler(state=Register.pinfl)
async def pinfl(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['pinfl'] = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    cursor.execute("REPLACE INTO users (user_id, full_name, phone, birth, pinfl, lang) VALUES (?, ?, ?, ?, ?, ?)", (
        message.from_user.id,
        data['full_name'],
        data['phone'],
        data['birth'],
        data['pinfl'],
        data['lang']
    ))
    conn.commit()

    # –ú–µ–Ω—é
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add("üìà –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", "üìä –ö—Ä–µ–¥–∏—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä")
    menu.add(langs[data['lang']]['change_lang'], langs[data['lang']]['to_menu'])
    await message.answer(langs[data['lang']]['reg_done'], reply_markup=menu)
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
@dp.message_handler(Text(equals=["üìà –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", "üìä –ö—Ä–µ–¥–∏—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä"]))
async def menu(message: types.Message):
    text = message.text
    user = cursor.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,)).fetchone()
    lang = user[-1] if user else 'ru'

    if text == "üìà –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è":
        await message.answer(langs[lang]['send_problem'])
        await Register.problem.set()
    elif text == "üìä –ö—Ä–µ–¥–∏—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        await message.answer("üëâ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: @YOUR_CREDIT_BOT")
    elif text == "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä":
        await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        await Register.problem.set()

@dp.message_handler(state=Register.problem)
async def get_problem(message: types.Message, state: FSMContext):
    user = cursor.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,)).fetchone()
    lang = user[-1]
    text = message.text

    report = f"""üì© *–ù–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç* @{message.from_user.username or message.from_user.full_name}

üìù _"{text}"_

‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"""

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer:{message.from_user.id}"),
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"close:{message.from_user.id}")
    )

    sent = await bot.send_message(chat_id=GROUP_ID, text=report, reply_markup=markup)
    user_data[message.from_user.id] = {"msg_id": sent.message_id, "chat_id": sent.chat.id}

    await message.answer(langs[lang]['problem_sent'])
    await state.finish()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@dp.callback_query_handler(Text(startswith="answer:"))
async def answer_problem(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    await call.message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è @{user_id}")
    await call.answer()

@dp.callback_query_handler(Text(startswith="close:"))
async def close_problem(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    data = user_data.get(user_id)
    if data:
        await bot.edit_message_text(
            chat_id=data["chat_id"],
            message_id=data["msg_id"],
            text=call.message.text.replace("‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞", f"‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ\nüë§ –û—Ç–≤–µ—Ç–∏–ª: @{call.from_user.username}")
        )
    await call.answer("–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
